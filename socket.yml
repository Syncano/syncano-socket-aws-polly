name: aws-polly
description: Amazon Polly Integration
long_description: |
  Amazon Polly is a Text-to-Speech (TTS) cloud service that converts text into lifelike speech.
version: 0.0.2
runtime: nodejs_v8

config:
  AWS_ACCESS_KEY_ID:
    description: AWS Access Key
    long_description: |
      To find the key, log into your AWS account to get it
    required: true
  AWS_SECRET_ACCESS_KEY:
    description: AWS Access Secret Key
    long_description: |
      To find the key, log into your AWS account to get it
    required: true
  region:
    description: Region
    long_description: |
      On your AWS Console, search for Polly to check supported regions and select one (e.g, us-east-1 )
    required: true

endpoints:
  delete-lexicon:
    description: Deletes the specified pronunciation lexicon stored in an AWS Region.
    inputs:
      properties:
        lexiconName:
          type: string
          description: The name of the lexicon to delete. Must be an existing lexicon in the region.
          examples:
            - Example
        username:
          type: string
          description: Name of the User (Required only when user token not sent).
          examples:
            - Nik
        message_text:
          type: string
          description: Content of the message.
          examples:
            - How are you doing.
        room:
          type: string
          description:  Name of group, should only contain url friendly characters.
          examples:
            - group_sports
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
              "statusCode": 200,
              "message": "Lexicon Deleted"
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "statusCode": 404,
              "code": "LexiconNotFoundException",
              "message": "Lexicon not found"
            }

  describe-voices:
    description: Returns the list of voices that are available for use when requesting speech synthesis.
    inputs:
      properties:
        languageCode:
          type: string
          description: Language identification tag for filtering the list of voices returned (Optional)
          examples:
            - en-US
        nextToken:
          type: string
          description: An opaque pagination token returned from the previous `DescribeVoices` operation.
          examples:
            - opaqueToken
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
              "message": "Described Voice",
              "data": {
                "Voices": []
              }
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "statusCode": 400,
              "code": "ValidationException",
              "message": "1 validation error detected"
            }

  get-lexicon:
    description: Returns the content of the specified pronunciation lexicon stored in an AWS Region
    inputs:
      properties:
        lexiconName:
          type: string
          description: "Name of the lexicon."
          examples:
            - Example
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
              "statusCode": 200,
              "data": {
                "Lexicon": {}
              }
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "statusCode": 400,
              "code": "LexiconNotFoundException",
              "message": "Lexicon not found"
            }

  list-lexicons:
    description: Returns a list of pronunciation lexicons stored in an AWS Region.
    inputs:
      properties:
        nextTokens:
          type: string
          description: Pagination token
          long_description: |
            An opaque pagination token returned from previous ListLexicons operation. (Optional)
          examples:
            - token
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
              "message": "List of Lexicons"
              "data": {
                "Lexicon": []
              }
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "detail": "Not found."
            }

  put-lexicon:
    description: Stores a pronunciation lexicon in an AWS Region.
    inputs:
      properties:
        lexiconName:
          type: string
          description: Name of the lexicon -  name is case sensitive
          examples:
            - Example
        content:
          type: string
          description: Content of the PLS lexicon
          examples:
            - Check PSL for its text format.
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
              "StatusCode": 200
              "message": "Lexicon Saved"
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "statusCode": 400,
              "code": "MissingRequiredParameter",
              "message": "Missing required key 'Content' in params"
            }

  synthesize-speech:
    description: Synthesizes UTF-8 input, plain text or SSML, to a stream of bytes.
    inputs:
      properties:
        params:
          type: object
          description: First name of the person you want to greet
          examples:
            - |
              {
                "params": {
                  "OutputFormat": "pcm",
                  "VoiceId": "Raveena",
                  "Text": "text"
                }
              }
        content:
          type: string
          description: Content of the PLS lexicon
          examples:
            - Check PSL for its text format.
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
              msg: "Text converted",
              data: {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "statusCode": 400,
              "code": "MissingRequiredParameter",
              "message": "Missing required key 'Text' in params"
            }


